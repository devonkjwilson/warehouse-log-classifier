# classifier.py
import pandas as pd
import argparse
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
import joblib
import os

MODEL_PATH = "log_classifier.joblib"

def train_model(data_path='logs_sample.csv'):
    df = pd.read_csv(data_path)
    model = make_pipeline(TfidfVectorizer(), MultinomialNB())
    model.fit(df['log_text'], df['label'])
    joblib.dump(model, MODEL_PATH)
    print(f"Model trained and saved to {MODEL_PATH}")

def predict_log(log):
    if not os.path.exists(MODEL_PATH):
        raise Exception("Model not found. Please train it first.")
    model = joblib.load(MODEL_PATH)
    prediction = model.predict([log])[0]
    print(f"\nPrediction: {prediction}\n")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Warehouse Log Classifier")
    parser.add_argument("--train", action="store_true", help="Train the model")
    parser.add_argument("--predict", type=str, help="Classify a log message")

    args = parser.parse_args()

    if args.train:
        train_model()
    elif args.predict:
        predict_log(args.predict)
    else:
        parser.print_help()
